//编写代码分别定义一个整型、浮点型、布尔型、字符串型变量，使用fmt.Printf()搭配%T分别打印出上述变量的值和类型。
package main

import "fmt"

func main() {
	var a int8 = 10
	var b = 3.1415926
	c := "中国"
	var d bool = true
	fmt.Printf("%d\n", a)
	fmt.Printf("%.3f\n", b)
	// 对数值而言，宽度为该数值占用区域的最小宽度；精度为小数点之后的位数。但对于 %g/%G 而言，精度为所有数字的总数。例如，对于123.45，格式 %6.2f会打印123.45，而 %.4g 会打印123.5。%e 和 %f 的默认精度为6；但对于 %g 而言，它的默认精度为确定该值所必须的最小位数。
	// 对大多数值而言，宽度为输出的最小字符数，如果必要的话会为已格式化的形式填充空格。对字符串而言，精度为输出的最大字符数，如果必要的话会直接截断。
	// 宽度是指"必要的最小宽度". 若结果字符串的宽度超过指定宽度时, 指定宽度就会失效。
	// 若将宽度指定为`*'时, 将从参数中取得宽度值。
	// 紧跟在"."后面的数串表示精度(若只有"."的话，则为".0")。若遇到整数的指示符(`d', `i', `b', `o', `x', `X', `u')的话，精度表示数值部分的长度
	// 若遇到浮点数的指示符(`f')的话，它表示小数部分的位数。
	// 若遇到浮点数的指示符(`e', `E', `g', `G')的话，它表示有效位数
	// 若将精度设为`*'的话，将从参数中提取精度的值
	// 其中对于字符串％s或者浮点类型％f,来说，精度可以截断数据的长度．如下所示．
	fmt.Printf("%s\n", c)
	fmt.Printf("%t\n", d)
}
