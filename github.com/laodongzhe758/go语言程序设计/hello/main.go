// hello.go
// Go语言使用 C++风格的注释：//表示单行注释，到行尾结束，/…/ 表示多行
// 注释。Go语言中的惯例是使用单行注释，而多行注释则往往用于在开发过程中注释
// 掉若干行代码。

// 所有的Go语言代码都只能放置于一个包中，每一个Go程序都必须包含一个main
// 包以及一个 main()函数。main()函数作为整个程序的入口，在程序运行时最先被
// 执行。实际上，Go语言中的包还可能包含init()函数，它先于main()函数被执行，

// Go语言针对的处理单元是包而非文件，这意味着我们可以将包拆分成任意数量
// 的文件。在Go编译器看来，如果所有这些文件的包声明都是一样的，那么它们就同
// 样属于一个包，这跟把所有内容放在一个单一的文件里是一样的。通常，我们也可
// 以根据应用程序的功能将其拆分成尽可能多的包，以保持一切模块化，
package main

import (
	"fmt"     //fmt包提供来格式化文本和读入格式文本的函数
	"os"      //os 包提供了跨平台的操作系统层面变量及函数
	"strings" //而strings包则提供了处理字符串的函数
)

// Go语言的函数和方法以关键字func定义。但main包里的main()函数比较特别，
// 它既没有参数，也没有返回值。当main.main()运行完毕，程序会自动终止并向操
// 作系统返回0。通常我们可以随时选择退出程序，并返回一个自己选择的返回值，
func main() {
	who := "World!"

	//那些 import 语句也不用逗号分隔，
	// if 语句的条件也不用圆括号括起来。在Go语言中，包含函数体以及控制结构体（例
	// 如if语句和for循环语句）在内的代码块均使用花括号作为边界符。使用代码缩进仅
	// 仅是为了提高代码可读性。从技术层面讲，Go语言的语句是以分号分隔的，但这些
	// 是由编译器自动添加的，我们不用手动输入，除非我们需要在同一行中写入多个语
	// 句。没有分号及只需要少量的逗号和圆括号，使得Go语言的程序更容易阅读，并且
	// 可以大幅降低编写代码时的键盘敲击次数。
	if len(os.Args) > 1 {
		//os.Args[0]是＂hello＂或者＂hello.exe＂
		// 代码中的os.Args变量是一个string类型的切片

		// 现在我们只需要知道可以使用语言内置的len()函数来获得切片的长度即可，而切片的元素则可以通过[]索引操作
		// 来获得，其语法是一个 Python 语法子集。具体而言，slice[n]返回切片的第n个
		// 元素（从0开始计数），而slice[n:]则返回另一个包含从第n个元素到最后一个元
		// 素的切片。

		// 对于os.Args，这个切片总是至少包含一个string（程序本身的名字），其在切片中的
		// 位置索引为0（Go语言中的所有索引都是从0开始的）。

		who = strings.Join(os.Args[1:], " ")
		//   我们将从命令行输入的所有参数连接成一个字符串并赋值给 who 变量（标注④）。在这里我们使
		//   用赋值操作符（=），因为如果我们使用快速声明操作符（:=）的话，只能得到另一
		//   个生命周期仅限于当前 if代码块的新局部变量who。

		//   strings.Join()函数的输入
		//   参数为以一个string类型的切片和一个分隔符（可以是一个空字符，如＂＂）作为
		//   输入，返回一个由分隔符将切片中的所有字符串连接在一起的新字符串。在这个示
		//   例里我们用空格作为连接符来连接所有输入的字符串参数。

	}
	fmt.Println("Hello", who)
	//我们打印Hello和一个空格，以及who变量中的字符串，并添加一个换行符。
}
